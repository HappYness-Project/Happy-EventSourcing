@using HP.Application.DTOs
@using HP.Shared
@inject MediatR.IMediator _mediator


<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" arial-modal="true" role="dialog" >
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Title</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>

            <div class="modal-body">
                <p>@Text</p>
            </div>
            <div class="card-body">
                <EditForm Model="@Todoitem" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="dateInput">Date</label>
                    </div>
                    <div class="form-group">
                        <label for="Title">Title</label>
                        <InputText class="form-control" id="titleInput" @bind-Value = "Todoitem.Title" />
                    </div>
                    <div class="form-group">
                        <label for="Description">Description</label>
                        <InputText class="form-control" id="titleInput" @bind-Value = "Todoitem.Description" />
                    </div>
                    <div class="form-group">
                        <label for="typeInput">Type</label>
                        <InputSelect class="form-control" id="typeInput" @bind-Value="Todoitem.TodoType">
                            @{
                                foreach(var type in TodoType.List())
                                {
                                    <option value="@type">@type</option>
                                }
                            }
                        </InputSelect>
                    </div>

                </EditForm>
            </div>


            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="@ModalOk" >Ok</button>
            </div>
        </div>
    </div>
</div>





@code {
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public string Text { get; set; }
    [Parameter]
    public TodoDetailsDto ParentTodo { get; set; } = new();
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }
    public CreateTodoItemModel Todoitem { get; set; } = new();

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {
        return OnClose.InvokeAsync(true);
    }
    public async Task HandleValidSubmit()
    {
        var newTodoItem = await _mediator.Send(new CreateTodoItemCommand(ParentTodo.TodoId,Todoitem.Title, Todoitem.TodoType,Todoitem.Description));
    }
}