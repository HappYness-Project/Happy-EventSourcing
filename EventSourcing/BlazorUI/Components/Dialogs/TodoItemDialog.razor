@using HP.Application.Commands.Todo
@using HP.Application.Commands
@using HP.Application.DTOs
@using HP.Shared;
@using HP.Shared.Requests.Todos
@inject MediatR.IMediator _mediator


<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" arial-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="subtodo-dialog-title">@Title</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>

            <div class="subtodo-dialog-title h2">
                <p>@Text</p>
            </div>

            <div class="subtodo-dialog-body" >
                @if (TodoItemDialogType == DialogType.Create)
                {
                    <EditForm Model="@NewTodoItem">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="Title">Title</label>
                            <InputText class="form-control" id="titleInput" @bind-Value="NewTodoItem.TodoTitle" />
                        </div>
                        <div class="form-group">
                            <label for="Description">Description</label>
                            <InputText class="form-control" id="titleInput" @bind-Value="NewTodoItem.Description" />
                        </div>
                        <div class="form-group">
                            <label for="typeInput">Type</label>
                            <InputSelect class="form-control" id="typeInput" @bind-Value="NewTodoItem.TodoType">
                                @{
                                    foreach (var type in TodoType.List())
                                    {
                                    <option value="@type">@type</option>
                                    }
                            }
                        </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="dateInput">Start Date</label>
                        <InputDate class="form-control" id="dateInput" @bind-Value="NewTodoItem.StartDate"></InputDate>
                    </div>
                </EditForm>
                }
                else if (TodoItemDialogType == DialogType.Update)
                {
                    <EditForm Model="@SelectedTodoItem">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="Title">Title</label>
                            <InputText class="form-control" id="titleInput" @bind-Value="SelectedTodoItem.Title" />
                        </div>
                        <div class="form-group">
                            <label for="Description">Description</label>
                            <InputText class="form-control" id="titleInput" @bind-Value="SelectedTodoItem.Description" />
                        </div>
                        <div class="form-group">
                            <label for="typeInput">Type</label>
                            <InputSelect class="form-control" id="typeInput" @bind-Value="SelectedTodoItem.TodoType">
                            @{
                                    foreach (var type in TodoType.List())
                                    {
                                    <option value="@type">@type</option>
                                    }
                            }
                            </InputSelect>
                    </div>
                    <div class="form-group">
                        <label for="dateInput">Start Date</label>
                        <InputDate class="form-control" id="dateInput" @bind-Value="NewTodoItem.StartDate"></InputDate>
                    </div>
                </EditForm>
                }
            </div>

            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" @onclick="@OnClickTodoItem">@(TodoItemDialogType == DialogType.Create ? "Create" : "Update")</button>
                <button type="submit" class="btn btn-warning" @onclick="@ModalCancel">Cancel</button>
            </div>
        </div>
    </div>
</div>





@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public string Text { get; set; }
    [Parameter] public DialogType TodoItemDialogType { get; set; }
    [Parameter] public string ParentTodoId { get; set; } = string.Empty;
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public TodoItemDto SelectedTodoItem { get; set; }
    public CreateTodoItemRequest NewTodoItem { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (TodoItemDialogType == DialogType.Create)
        {
            SelectedTodoItem = new();
        }
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task CreateTodoItem()
    {
        return OnClose.InvokeAsync(true);
    }
    private async Task OnClickTodoItem()
    {
        if (TodoItemDialogType == DialogType.Create)
        {
            await _mediator.Send(new CreateTodoItemCommand(ParentTodoId, NewTodoItem.TodoTitle, NewTodoItem.TodoType, NewTodoItem.Description));
        }
        else if (TodoItemDialogType == DialogType.Update)
        {
            await _mediator.Send(new UpdateTodoItemCommand(ParentTodoId, SelectedTodoItem.Id, SelectedTodoItem.Title, SelectedTodoItem.Description, SelectedTodoItem.TodoType));
        }
        await OnClose.InvokeAsync(true);
    }

    public enum DialogType
    {
        Create,
        Update,
    }

}