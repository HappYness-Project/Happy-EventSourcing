@using HP.Application.Commands.Todo
@using HP.Application.Commands
@using HP.Application.DTOs
@using HP.Core.Commands;
@using HP.Shared;
@using HP.Shared.Common;
@using HP.Shared.Contacts;
@using HP.Shared.Requests.Todos


<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" arial-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="subtodo-dialog-title">@Title</h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>

            <div class="subtodo-dialog-title h2">
                <p>@Text</p>
            </div>

            <div class="subtodo-dialog-body">
                @if (TodoItemDialogType == DialogType.Create)
                {
                    <EditForm Model="@NewTodoItem">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="Title">Title</label>
                            <InputText class="form-control" id="titleInput" @bind-Value="NewTodoItem.TodoTitle" />
                        </div>
                        <div class="form-group">
                            <label for="Description">Description</label>
                            <InputText class="form-control" id="titleInput" @bind-Value="NewTodoItem.Description" />
                        </div>
                        <div class="form-group">
                            <label for="typeInput">Type</label>
                            <Dropdown TValue="TodoType" @bind-SelectedItem="@SelectedTodoTypeDropDownItem" SelectableItems="@TodoTypeEnums"></Dropdown>
                        </div>
                        <div class="form-group">
                            <label for="dateInput">Target Start Date</label>
                            <InputDate class="form-control" id="dateInput" @bind-Value="NewTodoItem.TargetStartDate"></InputDate>
                        </div>
                    </EditForm>
                }
                else if (TodoItemDialogType == DialogType.Update)
                {
                    <EditForm Model="@SelectedTodoItem">
                        <DataAnnotationsValidator />
                        <div class="form-group">
                            <label for="Title">Title</label>
                            <InputText class="form-control" id="titleInput" @bind-Value="SelectedTodoItem.Title" />
                        </div>
                        <div class="form-group">
                            <label for="Description">Description</label>
                            <InputText class="form-control" id="titleInput" @bind-Value="SelectedTodoItem.Description" />
                        </div>
                        <div class="form-group">
                            <label for="typeInput">Type</label>
                            <Dropdown TValue="TodoType" @bind-SelectedItem="@SelectedTodoTypeDropDownItem" SelectableItems="@TodoTypeEnums"></Dropdown>
                        </div>
                        <div class="form-group">
                            <label for="dateInput">Target Start Date</label>
                            <InputDate class="form-control" id="dateInput" @bind-Value="NewTodoItem.TargetStartDate"></InputDate>
                        </div>
                        <div class="form-group">
                            <label for="dateInput">Target End Date</label>
                            <InputDate class="form-control" id="dateInput" @bind-Value="NewTodoItem.TargetCompletedDate"></InputDate>
                        </div>
                    </EditForm>
                }
            </div>

            <div class="modal-footer">
                <button type="submit" class="btn btn-primary" @onclick="@OnClickTodoItem">@(TodoItemDialogType == DialogType.Create ? "Create" : "Update")</button>
                <button type="submit" class="btn btn-warning" @onclick="@ModalCancel">Cancel</button>
            </div>
        </div>
    </div>
</div>





@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public string Text { get; set; }
    [Parameter] public DialogType TodoItemDialogType { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public TodoItemDto SelectedTodoItem { get; set; }
    [Inject] public ITodoService _todoService { get; set; }
    public CreateTodoItemDto NewTodoItem { get; set; } = new();
    protected IList<DropdownItem<TodoType>> TodoTypeEnums { get; } = new List<DropdownItem<TodoType>>();
    protected DropdownItem<TodoType> SelectedTodoTypeDropDownItem { get; set; }
    private string _parentTodoId { get; set; }
    public TodoItemDialog()
    {
        foreach (TodoType type in TodoType.List())
        {
            var ddItem = new DropdownItem<TodoType>
                {
                    ItemObject = type,
                    DisplayText = type.Name
                };
            TodoTypeEnums.Add(ddItem);
        }
        SelectedTodoTypeDropDownItem = TodoTypeEnums[0];
    }

    protected override async Task OnInitializedAsync()
    {
        _parentTodoId = _todoService.Todo.TodoId;
        if (TodoItemDialogType == DialogType.Create)
        {
            SelectedTodoItem = new();
        }
    }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private Task CreateTodoItem()
    {
        return OnClose.InvokeAsync(true);
    }
    private async Task OnClickTodoItem()
    {
        CommandResult result;
        if (TodoItemDialogType == DialogType.Create)
        {
            NewTodoItem.TodoType = SelectedTodoTypeDropDownItem.ItemObject.ToString();
            result = await _todoService.CreateTodoItemAsync(_parentTodoId, NewTodoItem);
        }
        else if (TodoItemDialogType == DialogType.Update)
        {
            result = await _todoService.UpdateTodoItemAsync(_parentTodoId, SelectedTodoItem);
        }
        await OnClose.InvokeAsync(true);
    }

    public enum DialogType
    {
        Create,
        Update,
    }

}