@page "/todos/details/{TodoId}"
@using HP.Application.Commands
@using HP.Application.DTOs
@using HP.Application.Queries.Todos
@*@inject TodoState TodoState*@
@inject MediatR.IMediator _mediator
@inject IJSRuntime JS

<div class="w-100">
    <h4 class="col-8 row" style="font-weight:bold">USER, @Todo.UserId</h4>
    <h3>Todo(@Todo.TodoId) Details</h3>
    <button type="button" class="btn btn-danger btn-sm" @onclick="()=> OpenDeleteDialog()">Dialog Delete Testing</button>
    <hr />
    <div class="col-8 row">
        <div>
            <label>Todo Title: </label>
            <input style="font-weight:bold"  type="text" value="@Todo.TodoTitle" @onchange="OnSelectTitleChanged" />
        </div>
        <div>
            <label>Todo Type: </label>
            <input type="text" value ="@Todo.TodoType" />
        </div>
        <div>
            <label>Todo Status: </label>
            <input type="text" value="@(Todo.TodoStatus != null ? Todo.TodoStatus.Name  : "NotDefined")" />
            <select class="col-8 row" @onchange="StatusSelected">
                <option value="-1" disabled selected>(Select status)</option>
                @for (var i = 0; i < _StatusOptions.Count; i++)
                {
                    <option value="@i"> @_StatusOptions[i].Name </option>
                }
            </select>
        </div>
        <div class="col-6 row">
            <label>Description</label>
            <textarea  @bind="@Todo.Description" @bind:event="oninput">@Todo.Description</textarea>
        </div>

        @*<button class="sign-button btn btn-primary" @onclick="TodoState.ShowConfigureTodoItemDialog">Create SubTodo</button>*@

        @if (Todo.SubTodos != null)
        {
            @foreach (var subtodo in Todo.SubTodos)
            {
                <div class="card bg-light mt-3" style="width:25rem ">
                    <div class="card-body">
                        <h3 class="card-title">Title:@subtodo.Title </h3>
                        <p class="card-text">
                            <code>@subtodo.Description</code>:
                        </p>
                        <button>Update TodoItem</button>
                    </div>
                </div>
            }
        }
        <button class="btn btn-success ml-2" type="submit" onsubmit="@SaveTodoChanges">Save Changes</button>
    </div>
</div>

<div>&npsp;</div>
@if(DeleteTodoDialogOpen)
{
    <DeleteTodoDialog Title="Are you sure?" Text="Do you want to delete this entry?" OnClose="@OnDeleteDialogClose"></DeleteTodoDialog>
}
@if(AddTodoItemDialogOpen)
{
    <AddTodoItemDialog Title="Adding new todo Item" Text="Adding Todo Item for Todo:[]" @onclick="() => OpenAdd"></AddTodoItemDialog>
}


@*https://chrissainty.com/understanding-cascading-values-and-cascading-parameters/
https://github.com/patrickgod/BlazorEcommerce/blob/master/BlazorEcommerce/Client/Services/CartService/CartService.cs
<HP.GeneralUI.Dialog.TemplatedDialog Show="TodoState.ShowingConfigureDialog">
</HP.GeneralUI.Dialog.TemplatedDialog>
      # https://github.com/dotnet-architecture/eShopOnBlazor/blob/main/src/eShopOnBlazor/Pages/Catalog/Details.razor
       # https://github.com/JBeni/BlazorShop
       *@
@code {
    [Parameter] public string TodoId { get; set; } = string.Empty;
    public TodoDetailsDto Todo { get; set; } = new();
    public List<TodoStatus> _StatusOptions = new();
    public string newTodoTitle { get; set; }
    public string newTodoDesc { get; set; }
    public string newTodoType { get; set; }
    public bool DeleteTodoDialogOpen { get; set; }
    public bool AddTodoItemDialogOpen { get; set; }

    private void OnDeleteDialogClose(bool accepted)
    {
        DeleteTodoDialogOpen = false;
        StateHasChanged();
    }
    private void OpenDeleteDialog()
    {
        DeleteTodoDialogOpen = true;
        StateHasChanged();
    }
    private void OnAddTodoItemDialogOpen(bool accepted)
    {
        AddTodoItemDialogOpen = true;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        TodoStatus status1 = new(0, "NotDefined");
        TodoStatus status2 = new(1, "Accepted");
        TodoStatus status3 = new(2, "Started");
        TodoStatus status4 = new(3, "Completed");
        _StatusOptions.Add(status1);
        _StatusOptions.Add(status2);
        _StatusOptions.Add(status3);
        _StatusOptions.Add(status4);
        Todo = await _mediator.Send(new GetTodoById(TodoId));
    }
    public void handleChange(ChangeEventArgs args)
    {
        //SelectedId = Int32.Parse(args.Value.ToString());
    }
    void StatusSelected(ChangeEventArgs e)
    {
        var getStatus = e.Value as string;
    }

    private void OnSelectTitleChanged(ChangeEventArgs args)
    {
        newTodoTitle = args.Value as string;
    }
    //private void OnSelectDescChanged(ChangeEventArgs args)
    //{
    //    newTodoDesc = args.Value as string;
    //}
    private async Task DeleteTodoSubItem(string todoId, string subTodoId)
    {
        bool isRemoved = await _mediator.Send(new DeleteTodoItemCommand(todoId, subTodoId));
        if (isRemoved)
            Todo = await _mediator.Send(new GetTodoById(TodoId));
    }
    private async Task SaveTodoChanges()
    {
        Todo.TodoTitle = newTodoTitle;
        Todo.Description = newTodoDesc;
        Todo.TodoType = newTodoType;
        bool isUpdated = await _mediator.Send(new UpdateTodoCommand(Todo.TodoId, Todo.TodoTitle, Todo.Description, null));
        if (isUpdated)
        {
            Todo = await _mediator.Send(new GetTodoById(TodoId));
        }
        //await _mediator.Send(new UpdateTodo(TodoId));
    }
    private async Task CreateNewTodoItem(string todoId, string title)
    {
        var newTodoItem = await _mediator.Send(new CreateTodoItemCommand(todoId, title, "", "Description Null for now."));
    }
}


