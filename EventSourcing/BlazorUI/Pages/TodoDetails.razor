@page "/todos/details/{TodoId}"
@using HP.Application.Commands
@using HP.Application.DTOs
@using HP.Application.Queries.Todos
@inject MediatR.IMediator _mediator
@inject IJSRuntime JS

<div class="w-100">

    <button type="button" class="previous"></button>
    <h4 class="col-8 row" style="font-weight:bold">USER, @Todo.UserId</h4>
    <h3>Todo(@Todo.TodoId) Details</h3>
    <button type="button" class="btn btn-primary" @onclick="() => OpenAddTodoItemDialog(Todo)">Create SubTodo</button>
    <button type="button" class="btn btn-danger btn-sm" @onclick="()=> OpenDeleteDialog()">Delete</button>
    <hr />
    <div class="col-8 row">
        <div style="margin-bottom: 0.5rem;">
            <label>Todo Title: </label>
            <input style="font-weight:bold" type="text" value="@Todo.TodoTitle" @onchange="OnSelectTitleChanged" />
        </div>
        <div style="margin-bottom: 0.5rem;">
            <label>Todo Type: </label>
            <select @onchange="TypeSelected">
                @{
                    foreach (var type in TodoType.List())
                    {
                        <option value="@type">@type</option>
                    }
                }
            </select>
        </div>
        <div style="margin-bottom: 1rem;">
            <label>Todo Status: </label>
            <select @onchange="StatusSelected">
                @{
                    <option value="-1" disabled selected>(Select status)</option>
                    foreach (var status in TodoStatus.List())
                    {
                        <option value="@status">@status</option>
                    }
                }
            </select>
        </div>
        <div class="col-8 row" style="margin-bottom: 2rem;">
            <label>Description</label>
            <textarea @onchange="OnSelectDescChanged">@Todo.Description</textarea>
        </div>
        <br><br>
        @if (Todo.SubTodos != null)
        {
            <TodoItemElement Todo="@Todo"></TodoItemElement>
        }
        <p>&nbsp;&nbsp;</p>

        <button class="btn btn-success ml-2; col-8 row" type="button" @onclick="()=> SaveTodoChanges()">Save Changes</button>
    </div>
</div>



@if (DeleteTodoDialogOpen)
{
    <DeleteTodoDialog Title="Are you sure?" Text="Do you want to delete this entry?" OnClose="@OnDeleteDialogClose"></DeleteTodoDialog>
}
@if (AddTodoItemDialogOpen)
{
    <TodoItemDialog Title="Adding new todo Item" Text="Create new SubTodo Item" ParentTodo="@Todo" OnClose="@OnAddTodoItemDialogClose"></TodoItemDialog>
}

@*

<HP.GeneralUI.Dialog.TemplatedDialog Show="TodoState.ShowingConfigureDialog">
</HP.GeneralUI.Dialog.TemplatedDialog>*@

@code {
    [Inject] private NavigationManager NavigationManager { get; set; }
    [Parameter] public string TodoId { get; set; } = string.Empty;
    [Parameter] public EventCallback OnSubmitCallback { get; set; }
    public TodoDetailsDto Todo { get; set; } = new();
    public string newTodoTitle { get; set; }
    public string newTodoDesc { get; set; }
    public string newTodoType { get; set; }
    public string newStatus { get; set; }
    public bool DeleteTodoDialogOpen { get; set; }
    public bool AddTodoItemDialogOpen { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadTodoData();
        newTodoTitle = Todo.TodoTitle;
        newTodoDesc = Todo.Description;
        newTodoType = Todo.TodoType;
    }
    protected async Task SaveTodoChanges()
    {
        Todo.TodoTitle = newTodoTitle;
        Todo.Description = newTodoDesc;
        Todo.TodoType = newTodoType;
        bool isUpdated = await _mediator.Send(new UpdateTodoCommand(Todo.TodoId, Todo.TodoTitle, Todo.Description, null));
        if (isUpdated)
            await LoadTodoData();
    }
    private async Task LoadTodoData()
    {
        Todo = await _mediator.Send(new GetTodoById(TodoId));
        StateHasChanged();
    }
    private void StatusSelected(ChangeEventArgs args)
    {
        newStatus = args.Value as string;
    }
    private void TypeSelected(ChangeEventArgs args)
    {
        newTodoType = args.Value as string;
    }
    private void OnSelectTitleChanged(ChangeEventArgs args)
    {
        newTodoTitle = args.Value as string;
    }
    private void OnSelectDescChanged(ChangeEventArgs args)
    {
        newTodoDesc = args.Value as string;
    }
    private void OnAddTodoItemDialogClose(bool accepted)
    {
        AddTodoItemDialogOpen = false;
        StateHasChanged();
    }
    private async void OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            await _mediator.Send(new DeleteTodoCommand(Todo.TodoId));
            NavigationManager.NavigateTo("todos");
        }
        DeleteTodoDialogOpen = false;
        StateHasChanged();
    }
    private void OpenDeleteDialog()
    {
        DeleteTodoDialogOpen = true;
        StateHasChanged();
    }
    private void OpenAddTodoItemDialog(TodoDetailsDto todo)
    {
        AddTodoItemDialogOpen = true;
        StateHasChanged();
    }
    private void OnAddTodoItemDialogOpen(bool accepted)
    {
        AddTodoItemDialogOpen = true;
        StateHasChanged();
    }
}


