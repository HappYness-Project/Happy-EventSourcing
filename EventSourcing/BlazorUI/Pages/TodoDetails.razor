@page "/todos/details/{TodoId}"
@using HP.Application.Commands
@using HP.Application.DTOs
@using HP.Application.Queries.Todos
@inject MediatR.IMediator _mediator
@inject IJSRuntime JS

<div class="w-100">
    <h4 class="col-8 row" style="font-weight:bold">USER, @Todo.UserId</h4>
    <h3>Todo(@Todo.TodoId) Details</h3>
    <button type="button" class="btn btn-primary" @onclick="() => OpenAddTodoItemDialog(Todo)">Create SubTodo</button>
    <button type="button" class="btn btn-danger btn-sm" @onclick="()=> OpenDeleteDialog()">Delete</button>
    <hr />
    <div class="col-8 row">
        <div>
            <label>Todo Title: </label>
            <input style="font-weight:bold" type="text" value="@Todo.TodoTitle" @onchange="OnSelectTitleChanged" />
        </div>
        <div>
            <label>Todo Type: </label>
            <input type="text" value="@Todo.TodoType" />
        </div>
        <div>
            <label>Todo Status: </label>
            <select @onchange="StatusSelected">
                @{
                    <option value="-1" disabled selected>(Select status)</option>
                    foreach (var status in TodoStatus.List())
                    {
                        <option value="@status">@status</option>
                    }
                }

            </select>
        </div>
        <div class="col-8 row">
            <label>Description</label>
            <textarea @onchange="OnSelectDescChanged">@Todo.Description</textarea>
        </div>
        <br><br>

        <h4>Sub Items</h4>
        <div class="col-8 row">
            @if (Todo.SubTodos != null)
            {
                @foreach (var subtodo in Todo.SubTodos)
                {
                    <div class="card bg-light mt-3" style="width:22rem ">
                        <div class="card-body">
                            <h3 class="card-title">Title:@subtodo.Title </h3>
                            <p class="card-text">
                                <code>@subtodo.Description</code>:
                            </p>
                            <button>Update TodoItem</button>
                            <button>Remove</button>
                        </div>
                    </div>
                }
            }
        </div>

        <button class="btn btn-success ml-2; col-8 row" type="button" @onclick="()=> SaveTodoChanges()">Save Changes</button>
    </div>
</div>



@if (DeleteTodoDialogOpen)
{
    <DeleteTodoDialog Title="Are you sure?" Text="Do you want to delete this entry?" OnClose="@OnDeleteDialogClose"></DeleteTodoDialog>
}
@if (AddTodoItemDialogOpen)
{
    <AddTodoItemDialog Title="Adding new todo Item" Text="Create new SubTodo Item" ParentTodo="@Todo" OnClose="@OnAddTodoItemDialogClose"></AddTodoItemDialog>
}

@*
https://github.com/patrickgod/BlazorEcommerce/blob/master/BlazorEcommerce/Client/Services/CartService/CartService.cs
<HP.GeneralUI.Dialog.TemplatedDialog Show="TodoState.ShowingConfigureDialog">
</HP.GeneralUI.Dialog.TemplatedDialog>*@

@code {
    [Parameter] public string TodoId { get; set; } = string.Empty;
    public TodoDetailsDto Todo { get; set; } = new();
    public string newTodoTitle { get; set; }
    public string newTodoDesc { get; set; }
    public string newTodoType { get; set; }
    public bool DeleteTodoDialogOpen { get; set; }
    public bool AddTodoItemDialogOpen { get; set; }
    [Parameter]
    public EventCallback OnSubmitCallback { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        newTodoTitle = Todo.TodoTitle;
        newTodoDesc = Todo.Description;
        newTodoType = Todo.TodoType;
        await LoadTodoData();
    }
    protected async Task SaveTodoChanges()
    {
        Todo.TodoTitle = newTodoTitle;
        Todo.Description = newTodoDesc;
        Todo.TodoType = newTodoType;
        bool isUpdated = await _mediator.Send(new UpdateTodoCommand(Todo.TodoId, Todo.TodoTitle, Todo.Description, null));
        if (isUpdated)
            await LoadTodoData();
    }

    private async Task LoadTodoData()
    {
        Todo = await _mediator.Send(new GetTodoById(TodoId));
        StateHasChanged();
    }

    void StatusSelected(ChangeEventArgs e)
    {
        var getStatus = e.Value as string;
    }

    private void OnSelectTitleChanged(ChangeEventArgs args)
    {
        newTodoTitle = args.Value as string;
    }
    private void OnSelectDescChanged(ChangeEventArgs args)
    {
        newTodoDesc = args.Value as string;
    }
    private async Task DeleteTodoSubItem(string todoId, string subTodoId)
    {
        bool isRemoved = await _mediator.Send(new DeleteTodoItemCommand(todoId, subTodoId));
        if (isRemoved)
            await LoadTodoData();
    }

    private void OnAddTodoItemDialogClose(bool accepted)
    {
        AddTodoItemDialogOpen = false;
        StateHasChanged();
    }
    private async void OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            await _mediator.Send(new DeleteTodoCommand(Todo.TodoId));
        }
        DeleteTodoDialogOpen = false;
        StateHasChanged();
        NavigationManager.NavigateTo("todos");
    }
    private void OpenDeleteDialog()
    {
        DeleteTodoDialogOpen = true;
        StateHasChanged();
    }
    private void OpenAddTodoItemDialog(TodoDetailsDto todo)
    {
        AddTodoItemDialogOpen = true;
        StateHasChanged();
    }

    private void OnAddTodoItemDialogOpen(bool accepted)
    {
        AddTodoItemDialogOpen = true;
        StateHasChanged();
    }
}


