@page "/todos/details/{TodoId}"
@using HP.Application.DTOs
@using HP.Application.Queries.Todos
@inject MediatR.IMediator _mediator


<div class="main">
    <h4 class="col-8 row" style="font-weight:bold">USER, @Todo.UserId</h4>
    <h3>Todo(@Todo.TodoId) Details</h3>
    <hr />

    <div class="col-8 row">
        <h3 class="col-8 row" style="font-weight:bold">@Todo.TodoTitle</h3>
        <h6 class="col-8 row">Todo Type: @Todo.TodoType</h6>
        <h6 class="col-6 row">Status: @(Todo.TodoStatus != null ? Todo.TodoStatus.Name  : "NotDefined")</h6>
        <textarea class="col-6 row"  @bind="Desc" @bind:event="oninput">@Desc</textarea>   
        <select class="col-8 row" @onchange="StatusSelected">
            <option value="-1" disabled selected>(Select status)</option>
            @for(var i=0; i < _StatusOptions.Count; i++)
            {
                <option value="@i"> @_StatusOptions[i].Name </option>
            }
        </select>
        <button class="sign-button btn btn-primary" type="submit" onsubmit="@OnSubmitSaveChanges">Save Changes</button>
    </div>



    <EditForm Model="@Todo" OnValidSubmit="@OnSubmitSaveChanges">
        <div class="col-8 row">

        </div>
    </EditForm>

</div>



@code {
    [Parameter]
    public string TodoId { get; set; } = string.Empty;
    public TodoDetailsDto Todo { get; set; } = new();
    public List<TodoStatus> _StatusOptions = new();
    public string Desc { get; set; } = string.Empty;
    public string newTodoTitle { get; set; }
    public string newTodoDesc { get; set; }
    public string newTodoType { get; set; }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitializedAsync();
        TodoStatus status1 = new(0, "NotDefined");
        TodoStatus status2 = new(1, "Accepted");
        TodoStatus status3 = new(2, "Started");
        TodoStatus status4 = new(3, "Completed");
        _StatusOptions.Add(status1);
        _StatusOptions.Add(status2);
        _StatusOptions.Add(status3);
        _StatusOptions.Add(status4);

        Todo = await _mediator.Send(new GetTodoById(TodoId));
        Desc = Todo.Description;
    }
    public void handleChange(ChangeEventArgs args)
    {
        //SelectedId = Int32.Parse(args.Value.ToString());
    }
    void StatusSelected(ChangeEventArgs e)
    {
        var getStatus = e.Value as string;
    }

    private void OnSelectTitleChanged(ChangeEventArgs args)
    {
        newTodoTitle = args.Value as string;
    }
    private async Task SaveTodoChanges()
    {
        Todo.TodoTitle = newTodoTitle;
        Todo.Description = newTodoDesc;
        Todo.TodoType = newTodoType;
        //await _mediator.Send(new UpdateTodo(TodoId));
    }
}