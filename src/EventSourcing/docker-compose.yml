version: '3.4'

name: HappYnessProject
services:
  mongo:
    image: mongo
    restart: always
    ports:
      - 28017:27017

    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=secret
    networks:
      - happy_network
  hp.api:
    image: ${DOCKER_REGISTRY-}hpapi
    build:
      context: .
      dockerfile: HP.Api/Dockerfile
    depends_on:
      - mongo
    networks:
      - happy_network
  hp.blazor:
    image: ${DOCKER_REGISTRY-}blazorui
    build:
      context: .
      dockerfile: BlazorUI/Dockerfile
    depends_on:
      - mongo
    ports:
      - 5555:80
    networks:
      - happy_network
  zookeeper:
    image: bitnami/zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - happy_network
  kafka:
    image: bitnami/kafka
    ports:
      - '9092:9092'
    restart: always
    volumes:
      - "kafka_data:/bitnami"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
# KAFKA_LISTENERS: LISTENER_INTERN://kafka:9093,LISTENER_EXTERN://0.0.0.0:9092
#   KAFKA_ADVERTISED_LISTENERS: LISTENER_INTERN://kafka:9093,LISTENER_EXTERN://127.0.0.1:9092
#   KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_INTERN:PLAINTEXT,LISTENER_EXTERN:PLAINTEXT
#   KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_INTERN
    depends_on:
      - zookeeper
    networks:
      - happy_network
      
  postgres:
    image: postgres
    container_name: postgres_readdb
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    networks:
      - happy_network

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
   



networks:
  happy_network:
    name: happiness_bridge
    driver: bridge



