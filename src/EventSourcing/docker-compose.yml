version: '3.4'

services:
  mongo:
    image: mongo
    restart: always
    ports:
      - 28017:27017

    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=secret
    networks:
      - happy_network

  postgres:
     image: postgres:latest
     container_name: readdb
     environment:
       POSTGRES_USER: postgres
       POSTGRES_PASSWORD: postgres
       POSTGRES_DB: HP
     ports:
       - 5431:5432
     networks:
       - happy_network

  hp.api:
    image: ${DOCKER_REGISTRY-}hpapi:${PLATFORM:-linux}-${TAG:-latest}
    container_name: hp.api
    build:
      context: .
      dockerfile: HP.Api/Dockerfile
    depends_on:
      - mongo
      - postgres
    links:
      - postgres
    ports:
      - 5000:80
    networks:
      - happy_network

  hp.consumerworker:
    image: ${DOCKER_REGISTRY-}hpconsumerworker
    build:
      context: .
      dockerfile: Hp.ConsumerWorker/Dockerfile
    depends_on:
      - postgres
      - kafka
      - zookeeper
    networks:
      - happy_network

  hp.blazor:
    image: ${DOCKER_REGISTRY-}blazorui
    build:
      context: .
      dockerfile: BlazorUI/Dockerfile
    ports:
      - 5555:80
    networks:
      - happy_network

  zookeeper:
    image: bitnami/zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - happy_network

  kafka:
    image: bitnami/kafka
    ports:
      - '9092:9092'
    restart: always
    volumes:
      - "kafka_data:/bitnami"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://kafka:29092

    depends_on:
      - zookeeper
    networks:
      - happy_network

  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    environment:
      KAFKA_BROKERCONNECT: kafka:29092
    ports:
      - 9100:9000
    depends_on:
      - kafka 
    networks:
      - happy_network


volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  mongodb_data:
    driver: local



networks:
  happy_network:
    name: happiness_bridge
    driver: bridge



